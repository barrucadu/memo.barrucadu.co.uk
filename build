#!/usr/bin/env python3

"""build.py

Usage:
  build.py [--out=<dir>] [--root=<url>]
  build.py (-h | --help)

Options:
  -h --help       Show this screen.
  --out=<dir>     Directory to generate site in [default: _site]
  --root=<url>    Root of the website [default: https://memo.barrucadu.co.uk/]

"""

import os
import pypandoc
import yaml

from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from distutils.dir_util import create_tree, copy_tree
from docopt import docopt
from jinja2 import Environment, FileSystemLoader, select_autoescape


class MemoReader:
    def __init__(self, memodir="memos"):
        self.memodir = memodir

    def memos(self):
        """Read and parse all memos.
        """

        memos = []
        tag_names = []

        for memofile in os.listdir(self.memodir):
            fpath = os.path.join(self.memodir, memofile)
            if not os.path.isfile(fpath):
                continue

            with open(fpath, "r") as f:
                frontmatter, content, memo_tag_names = MemoReader.__split_frontmatter_content(fpath, f.readlines())

            memo = frontmatter
            rendered, toc = MemoReader.__pandocise_memo_content(memofile, content)
            memo["content"] = rendered
            if toc != []:
                memo["toc"] = toc
            memo["raw_content"] = content

            memos.append(memo)
            tag_names.extend(memo_tag_names)

        memos = MemoReader.__filter_and_sort_memos(memos)
        return memos, MemoReader.__make_tags(set(tag_names))


    @staticmethod
    def __split_frontmatter_content(fpath, lines):
        """Split a file into frontmatter and content, and interpret the
        frontmatter as a YAML document.
        """

        # structure of a document is:
        #
        #    ---
        #    yaml frontmatter
        #    ---
        #    content
        #
        # there may be more '---'s in the content, so we want the
        # index of the first one after the initial line.
        idx = lines[1:].index("---\n") + 1

        frontmatter = yaml.load("".join(lines[1:idx]), Loader=yaml.SafeLoader)
        content = "".join(lines[idx + 1:])

        # add the implicit frontmatter
        # todo - get original publication date from git log
        if "slug" not in frontmatter:
            frontmatter["slug"], _ = os.path.splitext(os.path.basename(fpath))
        if "isodate" not in frontmatter:
            frontmatter["isodate"] = frontmatter["date"].strftime("%Y-%m-%d")
        if "ppdate" not in frontmatter:
            frontmatter["ppdate"] = frontmatter["date"].strftime("%B %-d, %Y")

        # mangle the 'tags' field into a list
        tag_names = frontmatter.get("tags", [])
        if type(tag_names) is str:
            tag_names = [name.strip() for name in tag_names.split(",")]
        frontmatter["tags"] = MemoReader.__make_tags(tag_names)

        return frontmatter, content, tag_names


    @staticmethod
    def __pandocise_memo_content(memofile, content):
        """Render a memo's content using pandoc.
        """

        _, fmt = os.path.splitext(memofile)
        fmt = fmt[1:]
        if fmt == "lhs":
            fmt = "markdown+literate_haskell"

        rendered = pypandoc.convert_text(content, "html", format=fmt,
            filters=[
                "pandoc-sidenote",
                "pandoc-filter-transform-code",
            ],
            extra_args=[
                "--no-highlight",
            ],
        )

        toc = []
        for h2 in BeautifulSoup(rendered, features="html.parser").find_all("h2"):
            toc.append({
                "title": h2.text,
                "anchor": h2["id"],
            })

        return rendered, toc


    @staticmethod
    def __filter_and_sort_memos(memos):
        """Sort memos by recency and import, newest/most important first.
        Discard deprecated memos.
        """

        def key(memo):
            k = memo["date"]
            if "important" in memo:
                k += timedelta(days=365 * 1000)
            if not isinstance(k, datetime):
                k = datetime(k.year, k.month, k.day)
            return k

        return sorted(
            [memo for memo in memos if "deprecated" not in memo],
             key=key,
             reverse=True,
        )

    @staticmethod
    def __make_tags(tag_names):
        """Turn a list of tag names into tag objects.
        """

        return [
            { "name": name, "slug": name.lower().replace(" ", "-") }
            for name in tag_names
        ]


class WebsiteBuilder:
    def __init__(self, outdir, siteroot, tpldir="templates"):
        self.outdir = outdir
        self.siteroot = siteroot
        self.tagdir = "tag/"

        self.env = Environment(
            loader=FileSystemLoader(tpldir),
            autoescape=False,
        )


    def copy(self, source, subdir=False):
        """Copy the 'source' into the $target directory.

        If 'subdir' is true, copy 'source' to $target/'source'.
        """

        target = self.outdir
        if subdir:
            target = os.path.join(self.outdir, source)

        copy_tree(source, target)


    def memo_list(self, memos, tag=None):
        """Render a memo listing page.
        """

        fname = "index.html"
        if tag is not None:
            fname = os.path.join(self.tagdir, tag["slug"] + ".html")

        self.__render(fname, "list.html",
            title=WebsiteBuilder.__title_for(tag),
            tag=tag,
            memos=memos,
        )


    def memo_feed(self, memos, tag=None, num=10):
        """Render a memo listing feed.
        """

        # sort memos without putting important ones at the top
        def key(memo):
            k = memo["date"]
            if not isinstance(k, datetime):
                k = datetime(k.year, k.month, k.day)
            return k
        sorted_memos = sorted(memos, key=key, reverse=True)
        feed_memos = sorted_memos[:num]

        fname = "atom.xml"
        if tag is not None:
            fname = os.path.join(self.tagdir, tag["slug"] + ".xml")

        self.__render(fname, "atom.xml",
            title=WebsiteBuilder.__title_for(tag),
            tag=tag,
            feed_date=feed_memos[0]["isodate"],
            memos=feed_memos,
        )


    def memo(self, memo):
        """Render a memo.
        """

        self.__render(memo["slug"] + ".html", "memo.html", **memo)


    def __render(self, fname, tplfile, tag=None, **kwargs):
        """Render a template to a file.  The file name is interpreted relative
        to the base directory.
        """

        create_tree(self.outdir, [fname])

        tplargs = {
            "is_root": fname == "index.html",
            "site_name": WebsiteBuilder.__title_for(None),
            "site_root": self.siteroot,
            "tag_dir": self.tagdir,
            "url": fname,
        }

        if tag is not None:
            tplargs["tag"] = tag

        template = self.env.get_template(tplfile)
        rendered = template.render(**tplargs, **kwargs)

        with open(os.path.join(self.outdir, fname), "w") as f:
            print(rendered, file=f)


    @staticmethod
    def __title_for(tag=None):
        """Title for a memo listing or feed.
        """

        if tag is None:
            return "barrucadu's memos"

        return f"barrucadu's memos - tagged '{tag['name']}'"


args = docopt(__doc__)

memos, tags = MemoReader("memos").memos()

builder = WebsiteBuilder(args["--out"], args["--root"])

builder.copy("static")
builder.copy("css") # todo - minify
builder.copy("MathJax", subdir=True)

builder.memo_list(memos)
builder.memo_feed(memos)

for tag in tags:
    tagged_memos = [memo for memo in memos if tag in memo["tags"]]
    builder.memo_list(tagged_memos, tag=tag)
    builder.memo_feed(tagged_memos, tag=tag)

for memo in memos:
    builder.memo(memo)
